"""
Storage router module
"""
from typing import Optional, List
from fastapi import APIRouter, Depends, HTTPException, Query, UploadFile, File, Form
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import get_session
from app.core.auth import get_current_user
from app.modules.users.models import User
from app.modules.storage.service import StorageService
from app.modules.storage.schemas import (
    FileListResponse, FileResponse, FileCreate, FileUpdate,
    FolderCreate, FolderUpdate, FolderInDB,
    ShareItemRequest, SharedItemInDB,
    SearchResponse, FileMetadataResponse
)
from app.modules.storage.models import FileStatus, SharePermission

router = APIRouter(prefix="/storage", tags=["storage"])

@router.get("/files", response_model=FileListResponse)
async def list_files(
    folder_id: Optional[int] = None,
    status: Optional[FileStatus] = None,
    page: int = Query(1, gt=0),
    limit: int = Query(50, gt=0, le=100),
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> FileListResponse:
    """
    List files for the current user
    """
    service = StorageService(db)
    files = await service.list_files(
        user_id=current_user.id,
        folder_id=folder_id,
        status=status,
        page=page,
        limit=limit
    )
    return FileListResponse(files=files)

@router.post("/files", response_model=FileResponse)
async def upload_file(
    file: UploadFile = File(...),
    folder_id: Optional[int] = Form(None),
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> FileResponse:
    """
    Upload a new file
    """
    service = StorageService(db)
    
    # Create file
    file_create = FileCreate(
        filename=file.filename,
        original_filename=file.filename,
        content_type=file.content_type or "application/octet-stream",
        size=0,  # Will be updated after upload
        path="",  # Will be generated by service
        bucket="",  # Will be set by service
        owner_id=current_user.id,
        folder_id=folder_id
    )
    
    result = await service.upload_file(file_create, file)
    return result

@router.get("/files/{file_id}", response_model=FileResponse)
async def get_file(
    file_id: int,
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> FileResponse:
    """
    Get file details
    """
    service = StorageService(db)
    file = await service.get_file(file_id, current_user.id)
    if not file:
        raise HTTPException(status_code=404, detail="File not found")
    return file

@router.patch("/files/{file_id}", response_model=FileResponse)
async def update_file(
    file_id: int,
    update: FileUpdate,
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> FileResponse:
    """
    Update file details
    """
    service = StorageService(db)
    file = await service.update_file(file_id, current_user.id, update)
    if not file:
        raise HTTPException(status_code=404, detail="File not found")
    return file

@router.delete("/files/{file_id}")
async def delete_file(
    file_id: int,
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> None:
    """
    Delete a file
    """
    service = StorageService(db)
    await service.delete_file(file_id, current_user.id)

@router.post("/folders", response_model=FolderInDB)
async def create_folder(
    folder: FolderCreate,
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> FolderInDB:
    """
    Create a new folder
    """
    service = StorageService(db)
    folder.owner_id = current_user.id
    result = await service.create_folder(folder)
    return result

@router.patch("/folders/{folder_id}", response_model=FolderInDB)
async def update_folder(
    folder_id: int,
    update: FolderUpdate,
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> FolderInDB:
    """
    Update folder details
    """
    service = StorageService(db)
    folder = await service.update_folder(folder_id, current_user.id, update)
    if not folder:
        raise HTTPException(status_code=404, detail="Folder not found")
    return folder

@router.delete("/folders/{folder_id}")
async def delete_folder(
    folder_id: int,
    recursive: bool = Query(False),
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> None:
    """
    Delete a folder
    """
    service = StorageService(db)
    await service.delete_folder(folder_id, current_user.id, recursive)

@router.post("/share/{file_id}", response_model=SharedItemInDB)
async def share_item(
    file_id: int,
    share: ShareItemRequest,
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> SharedItemInDB:
    """
    Share a file with another user or generate share link
    """
    service = StorageService(db)
    result = await service.share_item(file_id, current_user.id, share)
    return result

@router.delete("/share/{share_id}")
async def revoke_share(
    share_id: int,
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> None:
    """
    Revoke file share
    """
    service = StorageService(db)
    await service.revoke_share(share_id, current_user.id)

@router.get("/search", response_model=List[SearchResponse])
async def search_files(
    query: str = Query(..., min_length=1),
    page: int = Query(1, gt=0),
    limit: int = Query(50, gt=0, le=100),
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> List[SearchResponse]:
    """
    Search files by content and metadata
    """
    service = StorageService(db)
    results = await service.search_files(
        query=query,
        user_id=current_user.id,
        page=page,
        limit=limit
    )
    return results

@router.get("/files/{file_id}/metadata", response_model=FileMetadataResponse)
async def get_file_metadata(
    file_id: int,
    db: AsyncSession = Depends(get_session),
    current_user: User = Depends(get_current_user)
) -> FileMetadataResponse:
    """
    Get file metadata
    """
    service = StorageService(db)
    metadata = await service.get_file_metadata(file_id, current_user.id)
    if not metadata:
        raise HTTPException(status_code=404, detail="File metadata not found")
    return metadata
